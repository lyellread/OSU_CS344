#!/usr/bin/bash

# $1 is the command to execute, on { dims transpose mean add multiply}
# $2..3 are matricies that will be passed as arguments.

function dimensions {

	#matrix dims [MATRIX]
	#[DONE] Prints error message to stderr, nothing to stdout and return value != 0 if:
	#	[DONE] Argument count is greater than 1 (e.g. `matrix dims m1 m2`).
	#	[DONE] Argument count is 1 but the file named by argument 1 is not readable (e.g. `matrix dims no_such_file`).
	#[DONE] Otherwise, prints "ROWS COLS" (Space separated!) to stdout, nothing to stderr, and returns 0.

	#Check file is openable. Print to stderr: https://stackoverflow.com/questions/2990414/echo-that-outputs-to-stderr
	if [ -f $filename ]
	then
		
		#Rows will be calculated by the number of lines in the file...
		#Using the "<" stdin redirect, there is no filename. https://stackoverflow.com/questions/10238363/how-to-get-wc-l-to-print-just-the-number-of-lines-without-file-name
		rows=$(wc -l < $filename)
		words=$(wc -w < $filename)

		#Cols is the number of total words / the number of rows... because words = rows * cols.
		cols=$((words/rows))

		printf "$rows $cols\n"
		exit 0

	else
		
		>&2 echo "Error opening file. Exiting."
		exit 2

	fi

}


function transpose {

	#matrix transpose [MATRIX]
	#Prints error message to stderr, nothing to stdout and return value != 0 if:
	#	[DONE] Argument count is greater than 1 (e.g. `matrix transpose m1 m2`).
	#	[DONE] Argument count is 1 but the file named by argument 1 is not readable (e.g. `matrix transpose no_such_file`).
	#[DONE] Otherwise, prints the transpose of the input, in a valid matrix format to stdout, nothing to stderr, and returns 0.

	if [ $nargs -eq 2 ] && [ -f $filename ]
	then
		
		#Get the number of cols in the matrix

		rows=$(wc -l < $filename)
		words=$(wc -w < $filename)
		col=$((words/rows))

		#Make a tempfile to store the output; https://unix.stackexchange.com/questions/181937/how-create-a-temporary-file-in-shell-script
		temp_file=$(mktemp)

		#For that range, append the new file with cut -f n (with \n replaced with \t)
		for c in $(seq 1 "$col")
		do
			cut -f "$c" "$filename" | paste -s >> "$temp_file"

		done

		#Cat out that file
		cat "$temp_file"
		rm "$temp_file"
		exit 0

	else
		
		>&2 echo "Error opening file. Exiting."
		exit 2

	fi
}


function mean {

	#matrix mean [MATRIX]
	#Prints error message to stderr, nothing to stdout and return value != 0 if:
	#	[DONE] Argument count is greater than 1 (e.g. `matrix mean m1 m2`).
	#	[DONE] Argument count is 1 but the file named by argument 1 is not readable (e.g. `matrix mean no_such_file`).
	#Otherwise, prints a row vector mean of the input matrix, in a valid matrix format to stdout, nothing to stderr, and returns 0. All values must round to the nearest integer, with ***.5 values rounded away from zero.

	if [ -f $filename ]
	then
		
		rows=$(wc -l < "$filename")
		words=$(wc -w < "$filename")
		col=$((words/rows))

		#Make a tempfile to store the output; https://unix.stackexchange.com/questions/181937/how-create-a-temporary-file-in-shell-script
		temp_file=$(mktemp)
		output_file=$(mktemp)
		sum_vector=$(mktemp)

		#For that range, append the new file with cut -f n (with \n replaced with \t)
		for c in $(seq 1 "$col")
		do
			cut -f "$c" "$filename" > $temp_file
			sum=0

			while read num
			do
				((sum += num))

			done < $temp_file

			echo $sum >> $output_file
		
		done

		cut -f "1" "$output_file" | paste -s > $sum_vector
			
		# Clean up & remake some tmpfiles

		rm $temp_file
		rm $output_file
		temp_file=$(mktemp)
		averages=$(mktemp)

		# Div all by total rows...

		for c in $(seq 1 "$col")
		do
			temp_var=$(cut -f "$c" "$sum_vector")
			#temp_file=$((temp_file/rows))
			temp_var=$(((temp_var + (rows/2)*( (temp_var>0)*2-1 )) / rows))


			echo "$temp_var" >> "$averages"		
		done

		cut -f "1" "$averages" | paste -s > $temp_file

		# Print out

		cat $temp_file

		rm $sum_vector $temp_file $average
		exit 0


	else

		>&2 echo "Error opening file. Exiting."
		exit 2

	fi
}


function add {

	#matrix add MATRIX_LEFT MATRIX_RIGHT
	#Prints error message to stderr, nothing to stdout and return value != 0 if:
	#	Argument count does not equal 2 (e.g. `matrix add m1 m2 m3` or `matrix add m1`).
	#	Argument count is 2 but the file named by either argument is not readable (e.g. `matrix add m1 no_such_file`).
	#	The dimensions of the input matrices do not allow them to be added together following the rules of matrix addition.
	#Otherwise, prints the sum of both matrices, in a valid matrix format to stdout, nothing to stderr, and returns 0.
	
	if [ -f $filename1 ] && [ -f $filename2 ]
	then


		
		
		exit 0
	
	else
		
		>&2 echo "Error opening file. Exiting."
		exit 2

	fi

}


function multiply {

	#matrix multiply MATRIX_LEFT MATRIX_RIGHT
	#Prints error message to stderr, nothing to stdout and return value != 0 if:
	#	Argument count does not equal 2 (e.g. `matrix multiply m1 m2 m3` or `matrix multiply m1`).
	#	Argument count is 2 but the file named by either argument is not readable (e.g. `matrix multiply m1 no_such_file`).
	#	The dimensions of the input matrices do not allow them to be multiplied together following the rules of matrix multiplication.
	#Otherwise, prints the product of both matrices, with the first argument as the left matrix and the second argument as the right matrix, in a valid matrix format to stdout, nothing to stderr, and returns 0. (`matrix multiply A B` should return A*B, not B*A)
	
	if [ -f $filename1 ] && [ -f $filename2 ]
	then
		
		output=$(mktemp)
		current_row=$(mktemp)
		current_col=$(mktemp)

		for v_x in $(seq 1 "$v_m")
		do
			intermediate=$(mktemp)

			for v_y in $(seq 1 "$v_p")
			do

				# cut row x from file 1
				head -n "$v_x" "$filename1" | tail -1 > $current_row

				#echo $(head -n "$v_x" "$filename1" | tail -1 | cat -A)
				#cat $current_row

				# cut col y from file 2
				cut -f "$v_y" "$filename2" | paste -s > $current_col

				#echo $(cut -f "$v_y" "$filename2" | paste -s | cat -A)
				#cat $current_col

				# define a tempfile to acc the products of row and col at n
				accumulator=$(mktemp)

				for v_z in $(seq 1 "$v_n")
				do

					col_at_n=$(cut -f "$v_z" "$current_col")
					row_at_n=$(cut -f "$v_z" "$current_row")

					((value = col_at_n * row_at_n)) 
					echo $value >> $accumulator
					#echo "" >> $accumulator

				done

				#echo "Accumulator:"
				#cat $accumulator

				sum=0
				while read num
				do
					((sum += num))

				done < $accumulator

				#echo "$sum"
				echo $sum >> $intermediate
				#echo "" >> $intermediate

			done

			cat $intermediate | paste -s >> $output
			#echo "" >> $output

		done

		cat $output
		#echo "Done"
		exit 0
	
	else
		
		>&2 echo "Error opening file. Exiting."
		exit 2

	fi

}



if [ "$#" -eq 0 ]
then

	>&2 echo "Too Few Arguments. Quitting."
	exit 1

elif [ "$#" -le 2 ] && [ "$1" = "dims" ]
then

	if [ "$#" -eq 1 ]
	then

		temp=$(mktemp)
		while read -r line
		do 
			echo "$line" >> $temp
			#echo "$line"
			
		done

		filename=$temp
		nargs=2
		dimensions
		rm $temp

	else
	
		#echo "Dimensions with $1, $2"
		filename=$2
		nargs=$#
		dimensions

	fi
	


elif [ "$#" -le 2 ] && [ "$1" = "transpose" ]
then

	if [ "$#" -eq 1 ]
	then

		temp=$(mktemp)
		while read -r line
		do 
			echo "$line" >> $temp
			#echo "$line"
			
		done

		filename=$temp
		nargs=2
		transpose
		rm $temp

	else
	
		#echo "Transpose with $1, $2"
		filename=$2
		nargs=$#
		transpose

	fi


elif [ "$#" -le 2 ] && [ "$1" = "mean" ]
then

	if [ "$#" -eq 1 ]
	then

		temp=$(mktemp)
		while read -r line
		do 
			echo "$line" >> $temp
			#echo "$line"
			
		done

		filename=$temp
		nargs=2
		mean
		rm $temp

	else
	
		#echo "Mean with $1, $2"
		filename=$2
		nargs=$#
		mean

	fi


elif [ "$#" -eq 3 ] && [ "$1" = "add" ]
then

	d1=$(./matrix dims "$2")
	d2=$(./matrix dims "$3")

	if [[ "$d1" == "$d2" ]]
	then

		#echo "Add with $1, $2, $3"
		filename1=$2
		filename2=$3
		nargs=$#
		add		

	else

		>&2 echo "Matricies aren't the same size. Quitting!"
		exit 3

	fi


elif [ "$#" -eq 3 ] && [ "$1" = "multiply" ]
then

	d1=$(./matrix dims "$2" | cut -d " " -f 2)
	d2=$(./matrix dims "$3" | cut -d " " -f 1)

	#echo $d1
	#echo $d2

	if [[ "$d1" == "$d2" ]]
	then

		#echo "Multiply with $1, $2, $3"
		
		v_m=$(./matrix dims "$2" | cut -d " " -f 1)
		v_n=$d1
		v_p=$(./matrix dims "$3" | cut -d " " -f 2)
		filename1=$2
		filename2=$3
		nargs=$#
		multiply	

	else

		>&2 echo "Matricies aren't the same size. Quitting!"
		exit 3

	fi

	

else

	>&2 echo "Failed to match argument layout (and/or) number with a valid function. Quitting."
	exit 1

fi

#echo "Complete"