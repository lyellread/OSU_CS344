#!/usr/bin/bash

# $1 is the command to execute, on { dims transpose mean add multiply}
# $2..3 are matricies that will be passed as arguments.

function dimensions {

	#matrix dims [MATRIX]
	#Prints error message to stderr, nothing to stdout and return value != 0 if:
	#Argument count is greater than 1 (e.g. `matrix dims m1 m2`).
	#Argument count is 1 but the file named by argument 1 is not readable (e.g. `matrix dims no_such_file`).
	#Otherwise, prints "ROWS COLS" (Space separated!) to stdout, nothing to stderr, and returns 0.

	#TODO: Check if file is openable...

	#Rows will be calculated by the number of lines in the file...
	rows = $(wc -l $1)

	#Cols will be the number of characters on the first line, which should always be num(tabs) in that line + 1...
	#Inspired by this answer: https://stackoverflow.com/a/31349082
	cols = $(head -n1 $1 | grep -o "\t" | wc -l)
	(($cols++))


	printf ("$rows $cols\n")

}


function transpose {

	#matrix transpose [MATRIX]
	#Prints error message to stderr, nothing to stdout and return value != 0 if:
	#Argument count is greater than 1 (e.g. `matrix transpose m1 m2`).
	#Argument count is 1 but the file named by argument 1 is not readable (e.g. `matrix transpose no_such_file`).
	#Otherwise, prints the transpose of the input, in a valid matrix format to stdout, nothing to stderr, and returns 0.


}


function mean {

	#matrix mean [MATRIX]
	#Prints error message to stderr, nothing to stdout and return value != 0 if:
	#Argument count is greater than 1 (e.g. `matrix mean m1 m2`).
	#Argument count is 1 but the file named by argument 1 is not readable (e.g. `matrix mean no_such_file`).
	#Otherwise, prints a row vector mean of the input matrix, in a valid matrix format to stdout, nothing to stderr, and returns 0. All values must round to the nearest integer, with ***.5 values rounded away from zero.


}


function add {

	#matrix add MATRIX_LEFT MATRIX_RIGHT
	#Prints error message to stderr, nothing to stdout and return value != 0 if:
	#Argument count does not equal 2 (e.g. `matrix add m1 m2 m3` or `matrix add m1`).
	#Argument count is 2 but the file named by either argument is not readable (e.g. `matrix add m1 no_such_file`).
	#The dimensions of the input matrices do not allow them to be added together following the rules of matrix addition.
	#Otherwise, prints the sum of both matrices, in a valid matrix format to stdout, nothing to stderr, and returns 0.


}


function multiply {

	#matrix multiply MATRIX_LEFT MATRIX_RIGHT
	#Prints error message to stderr, nothing to stdout and return value != 0 if:
	#Argument count does not equal 2 (e.g. `matrix multiply m1 m2 m3` or `matrix multiply m1`).
	#Argument count is 2 but the file named by either argument is not readable (e.g. `matrix multiply m1 no_such_file`).
	#The dimensions of the input matrices do not allow them to be multiplied together following the rules of matrix multiplication.
	#Otherwise, prints the product of both matrices, with the first argument as the left matrix and the second argument as the right matrix, in a valid matrix format to stdout, nothing to stderr, and returns 0. (`matrix multiply A B` should return A*B, not B*A)


}




if [ "$#" -eq 2 ] && [ "$1" = "dims" ]
then

	echo "Dimensions with $1, $2"


elif [ "$#" -eq 2 ] && [ "$1" = "transpose" ]
then

	echo "Transpose with $1, $2"


elif [ "$#" -eq 2 ] && [ "$1" = "mean" ]
then

	echo "Mean with $1, $2"


elif [ "$#" -eq 3 ] && [ "$1" = "add" ]
then

	echo "Add with $1, $2, $3"


elif [ "$#" -eq 3 ] && [ "$1" = "multiply" ]
then

	echo "multiply with $1, $2, $3"

else

	echo "Error with $1, $2"

fi

echo "Complete"